{"ast":null,"code":"import { catchError, tap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst api = 'http://103.221.220.183:8081/subtasks';\nexport class SubtaskService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  getSubtaskById(subtaskId) {\n    return this.httpClient.get(`${api}/${subtaskId}`);\n  }\n  createSubtask(subtask) {\n    return this.httpClient.post(api, subtask).pipe(tap(subtask => {\n      console.log('Create task successfully:', subtask);\n    }), catchError(this.handleError));\n  }\n  updateSubtask(subtask) {\n    return this.httpClient.patch(`${api}/${subtask.subTaskId}`, subtask).pipe(tap(subtask => {\n      console.log('Updated task successfully:', subtask);\n    }), catchError(this.handleError));\n  }\n  deleteSubtask(subtaskId) {\n    return this.httpClient.delete(`${api}/${subtaskId}`).pipe(tap(subTaskId => {\n      console.log(`Delete task ${subTaskId} successfully`);\n    }));\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      console.error('An error occurred:', error.error);\n    } else {\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n  static #_ = this.ɵfac = function SubtaskService_Factory(t) {\n    return new (t || SubtaskService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SubtaskService,\n    factory: SubtaskService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","tap","throwError","api","SubtaskService","constructor","httpClient","getSubtaskById","subtaskId","get","createSubtask","subtask","post","pipe","console","log","handleError","updateSubtask","patch","subTaskId","deleteSubtask","delete","error","status","Error","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\hoc\\mon\\LV\\Làm\\New folder\\nb-view\\src\\app\\core\\services\\subtask\\subtask.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Subtask } from '../../models/subtask';\r\nimport { Observable, catchError, tap, throwError } from 'rxjs';\r\n\r\nconst api = 'http://103.221.220.183:8081/subtasks';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SubtaskService {\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  getSubtaskById(subtaskId: string) {\r\n    return this.httpClient.get(`${api}/${subtaskId}`);\r\n  }\r\n\r\n  createSubtask(subtask: Subtask): Observable<Subtask> {\r\n    return this.httpClient.post<Subtask>(api, subtask).pipe(\r\n      tap((subtask) => {\r\n        console.log('Create task successfully:', subtask);\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  updateSubtask(subtask: Subtask): Observable<Subtask> {\r\n    return this.httpClient\r\n      .patch<Subtask>(`${api}/${subtask.subTaskId}`, subtask)\r\n      .pipe(\r\n        tap((subtask) => {\r\n          console.log('Updated task successfully:', subtask);\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  deleteSubtask(subtaskId: string): Observable<Subtask> {\r\n    return this.httpClient.delete<Subtask>(`${api}/${subtaskId}`).pipe(\r\n      tap((subTaskId) => {\r\n        console.log(`Delete task ${subTaskId} successfully`);\r\n      })\r\n    );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.status === 0) {\r\n      console.error('An error occurred:', error.error);\r\n    } else {\r\n      console.error(\r\n        `Backend returned code ${error.status}, body was: `,\r\n        error.error\r\n      );\r\n    }\r\n    return throwError(\r\n      () => new Error('Something bad happened; please try again later.')\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAAqBA,UAAU,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;;;AAE9D,MAAMC,GAAG,GAAG,sCAAsC;AAKlD,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAe;EAE7CC,cAAcA,CAACC,SAAiB;IAC9B,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAC,GAAGN,GAAG,IAAIK,SAAS,EAAE,CAAC;EACnD;EAEAE,aAAaA,CAACC,OAAgB;IAC5B,OAAO,IAAI,CAACL,UAAU,CAACM,IAAI,CAAUT,GAAG,EAAEQ,OAAO,CAAC,CAACE,IAAI,CACrDZ,GAAG,CAAEU,OAAO,IAAI;MACdG,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEJ,OAAO,CAAC;IACnD,CAAC,CAAC,EACFX,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAC7B;EACH;EAEAC,aAAaA,CAACN,OAAgB;IAC5B,OAAO,IAAI,CAACL,UAAU,CACnBY,KAAK,CAAU,GAAGf,GAAG,IAAIQ,OAAO,CAACQ,SAAS,EAAE,EAAER,OAAO,CAAC,CACtDE,IAAI,CACHZ,GAAG,CAAEU,OAAO,IAAI;MACdG,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEJ,OAAO,CAAC;IACpD,CAAC,CAAC,EACFX,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAC7B;EACL;EAEAI,aAAaA,CAACZ,SAAiB;IAC7B,OAAO,IAAI,CAACF,UAAU,CAACe,MAAM,CAAU,GAAGlB,GAAG,IAAIK,SAAS,EAAE,CAAC,CAACK,IAAI,CAChEZ,GAAG,CAAEkB,SAAS,IAAI;MAChBL,OAAO,CAACC,GAAG,CAAC,eAAeI,SAAS,eAAe,CAAC;IACtD,CAAC,CAAC,CACH;EACH;EAEQH,WAAWA,CAACM,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtBT,OAAO,CAACQ,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACLR,OAAO,CAACQ,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EACnDD,KAAK,CAACA,KAAK,CACZ;;IAEH,OAAOpB,UAAU,CACf,MAAM,IAAIsB,KAAK,CAAC,iDAAiD,CAAC,CACnE;EACH;EAAC,QAAAC,CAAA,G;qBA/CUrB,cAAc,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd1B,cAAc;IAAA2B,OAAA,EAAd3B,cAAc,CAAA4B,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}