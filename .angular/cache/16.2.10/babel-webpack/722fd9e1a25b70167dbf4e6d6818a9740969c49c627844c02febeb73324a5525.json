{"ast":null,"code":"import { catchError, tap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProjectService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  getAllProject() {\n    let api = environment.url + `projects`;\n    return this.httpClient.get(api).pipe(tap(() => {\n      console.log('call api get all project ');\n    }), catchError(this.handleError));\n  }\n  getAllProjectByCreatorId(creatorId) {\n    let api = environment.url + `projects?userId=${creatorId}`;\n    return this.httpClient.get(api).pipe(tap(() => {\n      console.log('call api get all project by creator');\n    }), catchError(this.handleError));\n  }\n  getProjectIstemplate() {\n    let api = environment.url + `projects?isTemplate=true`;\n    return this.httpClient.get(api).pipe(tap(() => {\n      console.log('call api get project is template ');\n    }), catchError(this.handleError));\n  }\n  getProjectById(projectId) {\n    let api = environment.url + `projects/${projectId}`;\n    return this.httpClient.get(api).pipe(tap(() => console.log('get project by id: ')), catchError(this.handleError));\n  }\n  createProjectClone(projectId, creatorId) {\n    let api = environment.url + `projects/${projectId}/Clone?creatorId=${creatorId}`;\n    return this.httpClient.post(api, {});\n  }\n  updateProjectById(project) {\n    let api = environment.url + `projects/${project.projectId}`;\n    return this.httpClient.patch(api, project).pipe(tap(() => console.log('update project successfully')), catchError(this.handleError));\n  }\n  deleteProject(projectId) {\n    let api = environment.url + `projects/${projectId}`;\n    return this.httpClient.delete(api).pipe(tap(() => console.log('delete project successfully')), catchError(this.handleError));\n  }\n  scheduleProcess(projectId) {\n    let api = environment.url + `projects/${projectId}/schedule`;\n    return this.httpClient.post(api, {});\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      console.error('An error occurred:', error.error);\n    } else {\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n  static #_ = this.ɵfac = function ProjectService_Factory(t) {\n    return new (t || ProjectService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProjectService,\n    factory: ProjectService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","tap","throwError","environment","ProjectService","constructor","httpClient","getAllProject","api","url","get","pipe","console","log","handleError","getAllProjectByCreatorId","creatorId","getProjectIstemplate","getProjectById","projectId","createProjectClone","post","updateProjectById","project","patch","deleteProject","delete","scheduleProcess","error","status","Error","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\hoc\\mon\\LV\\Làm\\New folder\\nb-view\\src\\app\\core\\services\\project\\project.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, tap, throwError } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Project } from '../../models/project';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProjectService {\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  getAllProject() {\r\n    let api: string = environment.url + `projects`;\r\n    return this.httpClient.get(api).pipe(\r\n      tap(() => {\r\n        console.log('call api get all project ');\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  getAllProjectByCreatorId(creatorId: string) {\r\n    let api: string = environment.url + `projects?userId=${creatorId}`;\r\n    return this.httpClient.get(api).pipe(\r\n      tap(() => {\r\n        console.log('call api get all project by creator');\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  getProjectIstemplate() {\r\n    let api: string = environment.url + `projects?isTemplate=true`;\r\n    return this.httpClient.get(api).pipe(\r\n      tap(() => {\r\n        console.log('call api get project is template ');\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  getProjectById(projectId: string) {\r\n    let api: string = environment.url + `projects/${projectId}`;\r\n    return this.httpClient.get(api).pipe(\r\n      tap(() => console.log('get project by id: ')),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  createProjectClone(projectId: string, creatorId: string) {\r\n    let api: string =\r\n      environment.url + `projects/${projectId}/Clone?creatorId=${creatorId}`;\r\n    return this.httpClient.post(api, {});\r\n  }\r\n\r\n  updateProjectById(project: Project) {\r\n    let api: string = environment.url + `projects/${project.projectId}`;\r\n    return this.httpClient.patch(api, project).pipe(\r\n      tap(() => console.log('update project successfully')),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  deleteProject(projectId: string) {\r\n    let api: string = environment.url + `projects/${projectId}`;\r\n    return this.httpClient.delete(api).pipe(\r\n      tap(() => console.log('delete project successfully')),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  scheduleProcess(projectId: any) {\r\n    let api: string = environment.url + `projects/${projectId}/schedule`;\r\n    return this.httpClient.post(api, {});\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.status === 0) {\r\n      console.error('An error occurred:', error.error);\r\n    } else {\r\n      console.error(\r\n        `Backend returned code ${error.status}, body was: `,\r\n        error.error\r\n      );\r\n    }\r\n    return throwError(\r\n      () => new Error('Something bad happened; please try again later.')\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}