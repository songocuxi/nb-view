{"ast":null,"code":"import { catchError, tap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NotebookService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  getNotebookById(notebookId) {\n    let api = environment.urlNB + `notebooks/${notebookId}`;\n    return this.httpClient.get(api).pipe(tap(() => console.log('get notebook by id')), catchError(this.handleError));\n  }\n  getAllNotebooks() {\n    let api = environment.urlNB + `notebooks`;\n    return this.httpClient.get(api).pipe(tap(() => console.log('get all notebook successfully')), catchError(this.handleError));\n  }\n  createNotebook(notebook) {\n    let api = environment.urlNB + 'notebooks';\n    return this.httpClient.post(api, notebook).pipe(tap(() => console.log('create notebook successfully')), catchError(this.handleError));\n  }\n  deleteNotebook(notebookId) {\n    let api = environment.urlNB + `notebooks/${notebookId}`;\n    return this.httpClient.delete(api).pipe(tap(() => console.log('delete notebook successfully')), catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      console.error('An error occurred:', error.error);\n    } else {\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n  static #_ = this.ɵfac = function NotebookService_Factory(t) {\n    return new (t || NotebookService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotebookService,\n    factory: NotebookService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","tap","throwError","environment","NotebookService","constructor","httpClient","getNotebookById","notebookId","api","urlNB","get","pipe","console","log","handleError","getAllNotebooks","createNotebook","notebook","post","deleteNotebook","delete","error","status","Error","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\hoc\\mon\\LV\\Làm\\New folder\\nb-view\\src\\app\\core\\services\\notebook\\notebook.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, tap, throwError } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Notebook } from '../../models/notebook';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotebookService {\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  getNotebookById(notebookId: string) {\r\n    let api: string = environment.urlNB + `notebooks/${notebookId}`;\r\n    return this.httpClient.get(api).pipe(\r\n      tap(() => console.log('get notebook by id')),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  getAllNotebooks() {\r\n    let api: string = environment.urlNB + `notebooks`;\r\n    return this.httpClient.get(api).pipe(\r\n      tap(() => console.log('get all notebook successfully')),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  createNotebook(notebook: Notebook) {\r\n    let api: string = environment.urlNB + 'notebooks';\r\n    return this.httpClient.post(api, notebook).pipe(\r\n      tap(() => console.log('create notebook successfully')),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  deleteNotebook(notebookId: string) {\r\n    let api: string = environment.urlNB + `notebooks/${notebookId}`;\r\n    return this.httpClient.delete(api).pipe(\r\n      tap(() => console.log('delete notebook successfully')),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.status === 0) {\r\n      console.error('An error occurred:', error.error);\r\n    } else {\r\n      console.error(\r\n        `Backend returned code ${error.status}, body was: `,\r\n        error.error\r\n      );\r\n    }\r\n    return throwError(\r\n      () => new Error('Something bad happened; please try again later.')\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,UAAU,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;AAClD,SAASC,WAAW,QAAQ,8BAA8B;;;AAM1D,OAAM,MAAOC,eAAe;EAC1BC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAe;EAE7CC,eAAeA,CAACC,UAAkB;IAChC,IAAIC,GAAG,GAAWN,WAAW,CAACO,KAAK,GAAG,aAAaF,UAAU,EAAE;IAC/D,OAAO,IAAI,CAACF,UAAU,CAACK,GAAG,CAACF,GAAG,CAAC,CAACG,IAAI,CAClCX,GAAG,CAAC,MAAMY,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CAAC,EAC5Cd,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAC7B;EACH;EAEAC,eAAeA,CAAA;IACb,IAAIP,GAAG,GAAWN,WAAW,CAACO,KAAK,GAAG,WAAW;IACjD,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAACF,GAAG,CAAC,CAACG,IAAI,CAClCX,GAAG,CAAC,MAAMY,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAAC,EACvDd,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAC7B;EACH;EAEAE,cAAcA,CAACC,QAAkB;IAC/B,IAAIT,GAAG,GAAWN,WAAW,CAACO,KAAK,GAAG,WAAW;IACjD,OAAO,IAAI,CAACJ,UAAU,CAACa,IAAI,CAACV,GAAG,EAAES,QAAQ,CAAC,CAACN,IAAI,CAC7CX,GAAG,CAAC,MAAMY,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAAC,EACtDd,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAC7B;EACH;EAEAK,cAAcA,CAACZ,UAAkB;IAC/B,IAAIC,GAAG,GAAWN,WAAW,CAACO,KAAK,GAAG,aAAaF,UAAU,EAAE;IAC/D,OAAO,IAAI,CAACF,UAAU,CAACe,MAAM,CAACZ,GAAG,CAAC,CAACG,IAAI,CACrCX,GAAG,CAAC,MAAMY,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAAC,EACtDd,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAC7B;EACH;EAEQA,WAAWA,CAACO,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtBV,OAAO,CAACS,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACLT,OAAO,CAACS,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EACnDD,KAAK,CAACA,KAAK,CACZ;;IAEH,OAAOpB,UAAU,CACf,MAAM,IAAIsB,KAAK,CAAC,iDAAiD,CAAC,CACnE;EACH;EAAC,QAAAC,CAAA,G;qBA/CUrB,eAAe,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAf1B,eAAe;IAAA2B,OAAA,EAAf3B,eAAe,CAAA4B,IAAA;IAAAC,UAAA,EAFd;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}