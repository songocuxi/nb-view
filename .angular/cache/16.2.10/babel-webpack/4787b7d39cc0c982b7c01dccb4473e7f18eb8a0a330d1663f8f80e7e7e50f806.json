{"ast":null,"code":"import { catchError, tap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst api = 'http://103.221.220.183:8081/tasks';\nexport class TaskService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  getTaskListByProjectId(projectId) {\n    return this.httpClient.get(`${api}?projectId=${projectId}`);\n  }\n  getTaskById(taskId) {\n    let api = environment.url + `tasks/${taskId}`;\n    return this.httpClient.get(api).pipe(tap(() => console.log('get task by id')), catchError(this.handleError));\n  }\n  getSubtaskList(taskId) {\n    let api = environment.url + `tasks/${taskId}/subtasks`;\n    return this.httpClient.get(api).pipe(tap(() => console.log('get subtask list')), catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      console.error('An error occurred:', error.error);\n    } else {\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n  static #_ = this.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","tap","throwError","environment","api","TaskService","constructor","httpClient","getTaskListByProjectId","projectId","get","getTaskById","taskId","url","pipe","console","log","handleError","getSubtaskList","error","status","Error","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\hoc\\mon\\LV\\Làm\\New folder\\nb-view\\src\\app\\core\\services\\task\\task.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, tap, throwError } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Task } from '../../models/task';\r\n\r\nconst api = 'http://103.221.220.183:8081/tasks';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskService {\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  getTaskListByProjectId(projectId: string) {\r\n    return this.httpClient.get<Task[]>(`${api}?projectId=${projectId}`);\r\n  }\r\n\r\n  getTaskById(taskId: string) {\r\n    let api: string = environment.url + `tasks/${taskId}`;\r\n    return this.httpClient.get(api).pipe(\r\n      tap(() => console.log('get task by id')),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  getSubtaskList(taskId: string) {\r\n    let api: string = environment.url + `tasks/${taskId}/subtasks`;\r\n    return this.httpClient.get(api).pipe(\r\n      tap(() => console.log('get subtask list')),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.status === 0) {\r\n      console.error('An error occurred:', error.error);\r\n    } else {\r\n      console.error(\r\n        `Backend returned code ${error.status}, body was: `,\r\n        error.error\r\n      );\r\n    }\r\n    return throwError(\r\n      () => new Error('Something bad happened; please try again later.')\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,UAAU,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;AAClD,SAASC,WAAW,QAAQ,8BAA8B;;;AAG1D,MAAMC,GAAG,GAAG,mCAAmC;AAK/C,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAe;EAE7CC,sBAAsBA,CAACC,SAAiB;IACtC,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAS,GAAGN,GAAG,cAAcK,SAAS,EAAE,CAAC;EACrE;EAEAE,WAAWA,CAACC,MAAc;IACxB,IAAIR,GAAG,GAAWD,WAAW,CAACU,GAAG,GAAG,SAASD,MAAM,EAAE;IACrD,OAAO,IAAI,CAACL,UAAU,CAACG,GAAG,CAACN,GAAG,CAAC,CAACU,IAAI,CAClCb,GAAG,CAAC,MAAMc,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAAC,EACxChB,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAC7B;EACH;EAEAC,cAAcA,CAACN,MAAc;IAC3B,IAAIR,GAAG,GAAWD,WAAW,CAACU,GAAG,GAAG,SAASD,MAAM,WAAW;IAC9D,OAAO,IAAI,CAACL,UAAU,CAACG,GAAG,CAACN,GAAG,CAAC,CAACU,IAAI,CAClCb,GAAG,CAAC,MAAMc,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CAAC,EAC1ChB,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAC7B;EACH;EAEQA,WAAWA,CAACE,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtBL,OAAO,CAACI,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACLJ,OAAO,CAACI,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EACnDD,KAAK,CAACA,KAAK,CACZ;;IAEH,OAAOjB,UAAU,CACf,MAAM,IAAImB,KAAK,CAAC,iDAAiD,CAAC,CACnE;EACH;EAAC,QAAAC,CAAA,G;qBAnCUjB,WAAW,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXtB,WAAW;IAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}